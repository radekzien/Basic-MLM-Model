# -*- coding: utf-8 -*-
"""LRandRF_MLM_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgBYgo_y0IVSGCP_mfkgjx_Pt-Lgmtna
"""

import pandas as pd
#Imports for Regression Model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

#Imports for Random Forest Model
from sklearn.ensemble import RandomForestRegressor

#Import for both models
from sklearn.metrics import mean_squared_error, r2_score

#Imports for Data Visualisation
import matplotlib.pyplot as plt
import numpy as np

##Loading in data frame
df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/refs/heads/master/delaney_solubility_with_descriptors.csv')

##Data Separation into x and y
y = df['logS']
x = df.drop('logS', axis = 1)

##Splitting data into training sets and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=100)




#----------Regression Model----------

##Model Building
#Linear Regression
lr = LinearRegression()
lr.fit(x_train, y_train) ##Training the model

#Applying the model to make a prediction
y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)


##Evaluate model performance
lr_train_mse = mean_squared_error(y_train, y_lr_train_pred)
lr_train_r2 = r2_score(y_train, y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test, y_lr_test_pred)
lr_test_r2 = r2_score(y_test, y_lr_test_pred)

#Printing Linear Regression Results in table form
lr_results = pd.DataFrame(['Linear Regression',lr_train_mse, lr_train_r2, lr_test_mse, lr_test_r2]).transpose()
lr_results.columns = ['Method','Training MSE','Training R2','Test MSE','Test R2']


#----------Random Forest Model----------

rf = RandomForestRegressor(max_depth = 2, random_state=100)

#Training the model
rf.fit(x_train, y_train)

#Applying the model to make a prediction
y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)

##Evaluating Model Performance
rf_train_mse = mean_squared_error(y_train, y_rf_train_pred)
rf_train_r2 = r2_score(y_train, y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test, y_rf_test_pred)
rf_test_r2 = r2_score(y_test, y_rf_test_pred)

#Printing Random Forest Results in table form
rf_results = pd.DataFrame(['Random Forest',rf_train_mse, rf_train_r2, rf_test_mse, rf_test_r2]).transpose()
rf_results.columns = ['Method','Training MSE','Training R2','Test MSE','Test R2']


#--------Model Comparison and Data Visualisation----------
df_models = pd.concat([lr_results, rf_results], axis = 0).reset_index(drop=True)

#Data visualisation

#LR Data
plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred, alpha = 0.3)

z = np.polyfit(y_train, y_lr_train_pred, 1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict LogS')
plt.xlabel('Experimental LogS')
plt.title("Linear Regression Model Predictions")

#RF Data
plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_rf_train_pred, c = '#F8766D', alpha = 0.3)

z = np.polyfit(y_train, y_rf_train_pred, 1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict LogS')
plt.xlabel('Experimental LogS')
plt.title("Random Forest Model Predictions")